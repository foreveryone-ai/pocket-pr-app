// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
  relationMode      = "foreignKeys"
}

generator client {
    provider = "prisma-client-js"
}

model Users {
    id                  String   @id @default(cuid())
    createdAt           DateTime @default(now())
    updatedAt           DateTime @updatedAt
    google_id           String?  @unique
    twitter_id          String?  @unique
    instagram_id        String?  @unique
    linkedin_id         String?  @unique
    twitch_id           String?  @unique
    discord_id          String?  @unique
    facebook_id         String?  @unique
    name                String?
    email               String   @unique
    image_url           String?
    youtube_channel_id  String?
    sender              Messages[]
    videos              Videos[]
    prompts             Prompts[]
}

model Videos {
    id                  String   @id @default(cuid())
    createdAt           DateTime @default(now())
    updatedAt           DateTime @updatedAt
    video_id            String   @unique
    title               String
    description         String
    published_at        DateTime
    thumbnail_url       String
    channel_id          String
    channel_title       String
    user_id             String
    user                Users    @relation(fields: [user_id], references: [id], onDelete: Cascade) 
    comments            Comments[]
    conversation        Conversation?
    captions            Captions[]
    caption_summary     CaptionSummary[]

    @@index([user_id])
}

model Conversation {
    id                  String   @id @default(cuid())
    createdAt           DateTime @default(now())
    updatedAt           DateTime @updatedAt
    video_id            String   @unique 
    video               Videos   @relation(fields: [video_id], references: [id], onDelete: Cascade)
    messages            Messages[]

    @@index([video_id])
}

model Messages {
    id                  String   @id @default(cuid())
    createdAt           DateTime @default(now())
    updatedAt           DateTime @updatedAt
    content             String
    sender_id           String   @unique 
    sender              Users    @relation(fields: [sender_id], references: [id], onDelete: Cascade) 
    conversation_id     String
    conversation        Conversation @relation(fields: [conversation_id], references: [id], onDelete: Cascade) 

    @@index([sender_id])
    @@index([conversation_id])
}

enum SENTIMENT {
    POSITIVE
    NEGATIVE
    NEUTRAL
}

model Comments {
    id                  String   @id @default(cuid())
    createdAt           DateTime @default(now())        
    updatedAt           DateTime @updatedAt
    comment_id          String   @unique
    text_display        String
    like_count          Int
    published_at        DateTime
    video_id            String
    author_display_name String
    author_image_url    String
    video               Videos   @relation(fields: [video_id], references: [id], onDelete: Cascade) 
    replies             Replies[]

    @@index([video_id])
}

model Replies {
    id                  String   @id @default(cuid())
    createdAt           DateTime @default(now())
    updatedAt           DateTime @updatedAt
    reply_id            String   @unique
    text_display        String
    like_count          Int
    author_display_name String
    author_image_url    String
    published_at        DateTime
    comment_id          String
    summary             String?
    comment             Comments @relation(fields: [comment_id], references: [id], onDelete: Cascade) 
    sentiment           SENTIMENT?

    @@index([comment_id])
}

model Prompts {
    id                  String   @id @default(cuid())
    createdAt           DateTime @default(now())
    updatedAt           DateTime @updatedAt
    prompt_text         String
    user_id             String
    user                Users    @relation(fields: [user_id], references: [id], onDelete: Cascade)

    @@index([user_id])
}

model Captions {
    id                  String  @id @default(cuid()) 
    captions            String
    language            String
    updatedAt           DateTime @updatedAt
    video_id            String 
    video               Videos      @relation(fields: [video_id], references: [id], onDelete: Cascade)
    captionsSummary     CaptionSummary[]

    @@index([video_id])
}
model CaptionSummary {
    id                  String  @id @default(cuid()) 
    createdAt           DateTime @default(now())
    updatedAt           DateTime @updatedAt
    summaryText         String
    caption_id          String 
    caption             Captions @relation(fields: [caption_id], references: [id], onDelete: Cascade)
    video_id                 String 
    video                    Videos      @relation(fields: [video_id], references: [id], onDelete: Cascade)

    @@index([caption_id])
    @@index([video_id])
}

model Document {
  id      String                 @id @default(cuid())
  content String
  metadata Json?
  vector  Unsupported("vector")?
}